import React from 'react';
import { DepthShadowAlias, SpacingSpaceScale } from '@shopify/polaris-tokens';
declare type Element = 'div' | 'span' | 'section';
declare type Overflow = 'hidden' | 'scroll';
export declare type BackgroundColorTokenScale = 'action-critical' | 'action-critical-depressed' | 'action-critical-disabled' | 'action-critical-hovered' | 'action-critical-pressed' | 'action-primary' | 'action-primary-depressed' | 'action-primary-disabled' | 'action-primary-hovered' | 'action-primary-pressed' | 'action-secondary' | 'action-secondary-depressed' | 'action-secondary-disabled' | 'action-secondary-hovered' | 'action-secondary-hovered-dark' | 'action-secondary-pressed' | 'action-secondary-pressed-dark' | 'backdrop' | 'background' | 'background-hovered' | 'background-pressed' | 'background-selected' | 'overlay' | 'surface' | 'surface-attention' | 'surface-critical' | 'surface-critical-subdued' | 'surface-critical-subdued-depressed' | 'surface-critical-subdued-hovered' | 'surface-critical-subdued-pressed' | 'surface-dark' | 'surface-depressed' | 'surface-disabled' | 'surface-highlight' | 'surface-highlight-subdued' | 'surface-highlight-subdued-hovered' | 'surface-highlight-subdued-pressed' | 'surface-hovered' | 'surface-hovered-dark' | 'surface-neutral' | 'surface-neutral-disabled' | 'surface-neutral-hovered' | 'surface-neutral-pressed' | 'surface-neutral-subdued' | 'surface-neutral-subdued-dark' | 'surface-pressed' | 'surface-pressed-dark' | 'surface-primary-selected' | 'surface-primary-selected-hovered' | 'surface-primary-selected-pressed' | 'surface-search-field' | 'surface-search-field-dark' | 'surface-selected' | 'surface-selected-hovered' | 'surface-selected-pressed' | 'surface-subdued' | 'surface-success' | 'surface-success-subdued' | 'surface-success-subdued-hovered' | 'surface-success-subdued-pressed' | 'surface-warning' | 'surface-warning-subdued' | 'surface-warning-subdued-hovered' | 'surface-warning-subdued-pressed';
export declare type ColorTokenScale = 'text' | 'text-critical' | 'text-disabled' | 'text-highlight' | 'text-on-critical' | 'text-on-dark' | 'text-on-interactive' | 'text-on-primary' | 'text-primary' | 'text-primary-hovered' | 'text-primary-pressed' | 'text-subdued' | 'text-subdued-on-dark' | 'text-success' | 'text-warning';
export declare type BorderTokenAlias = 'base' | 'dark' | 'divider' | 'divider-on-dark' | 'transparent';
export declare type BorderRadiusTokenScale = '05' | '1' | '2' | '3' | '4' | '5' | '6' | 'base' | 'large' | 'half';
export interface BoxProps {
    /** HTML Element type */
    as?: Element;
    /** Background color */
    background?: BackgroundColorTokenScale;
    /** Border style */
    border?: BorderTokenAlias;
    /** Vertical end border style */
    borderBlockEnd?: BorderTokenAlias;
    /** Horizontal start border style */
    borderInlineStart?: BorderTokenAlias;
    /** Horizontal end border style */
    borderInlineEnd?: BorderTokenAlias;
    /** Vertical start border style */
    borderBlockStart?: BorderTokenAlias;
    /** Border radius */
    borderRadius?: BorderRadiusTokenScale;
    /** Vertical end horizontal start border radius */
    borderRadiusEndStart?: BorderRadiusTokenScale;
    /** Vertical end horizontal end border radius */
    borderRadiusEndEnd?: BorderRadiusTokenScale;
    /** Vertical start horizontal start border radius */
    borderRadiusStartStart?: BorderRadiusTokenScale;
    /** Verital start horizontal end border radius */
    borderRadiusStartEnd?: BorderRadiusTokenScale;
    /** Color of children */
    color?: ColorTokenScale;
    /** HTML id attribute */
    id?: string;
    /** Set minimum height of container */
    minHeight?: string;
    /** Set minimum width of container */
    minWidth?: string;
    /** Set maximum width of container */
    maxWidth?: string;
    /** Clip horizontal content of children */
    overflowX?: Overflow;
    /** Clip vertical content of children */
    overflowY?: Overflow;
    /** Spacing around children */
    padding?: SpacingSpaceScale;
    /** Vertical start spacing around children */
    paddingBlockStart?: SpacingSpaceScale;
    /** Vertical end spacing around children */
    paddingBlockEnd?: SpacingSpaceScale;
    /** Horizontal start spacing around children */
    paddingInlineStart?: SpacingSpaceScale;
    /** Horizontal end spacing around children */
    paddingInlineEnd?: SpacingSpaceScale;
    /** Shadow */
    shadow?: DepthShadowAlias;
    /** Set width of container */
    width?: string;
    /** Elements to display inside box */
    children?: React.ReactNode;
}
export declare const Box: React.ForwardRefExoticComponent<BoxProps & React.RefAttributes<HTMLElement>>;
export {};
//# sourceMappingURL=Box.d.ts.map
