{"ast":null,"code":"import { get } from '../get.js';\nimport { merge } from '../merge.js';\nconst REPLACE_REGEX = /{([^}]*)}/g;\nclass I18n {\n  /**\n   * @param translation A locale object or array of locale objects that overrides default translations. If specifying an array then your desired language dictionary should come first, followed by your fallback language dictionaries\n   */\n  constructor(translation) {\n    this.translation = {};\n    // slice the array to make a shallow copy of it, so we don't accidentally\n    // modify the original translation array\n    this.translation = Array.isArray(translation) ? merge(...translation.slice().reverse()) : translation;\n  }\n  translate(id, replacements) {\n    const text = get(this.translation, id, '');\n    if (!text) {\n      return '';\n    }\n    if (replacements) {\n      return text.replace(REPLACE_REGEX, match => {\n        const replacement = match.substring(1, match.length - 1);\n        if (replacements[replacement] === undefined) {\n          const replacementData = JSON.stringify(replacements);\n          throw new Error(`Error in translation for key '${id}'. No replacement found for key '${replacement}'. The following replacements were passed: '${replacementData}'`);\n        } // This could be a string or a number, but JS doesn't mind which it gets\n        // and can handle that cast internally. So let it, to save us calling\n        // toString() on what's already a string in 90% of cases.\n\n        return replacements[replacement];\n      });\n    }\n    return text;\n  }\n  translationKeyExists(path) {\n    return Boolean(get(this.translation, path));\n  }\n}\nexport { I18n };","map":{"version":3,"names":["get","merge","REPLACE_REGEX","I18n","constructor","translation","Array","isArray","slice","reverse","translate","id","replacements","text","replace","match","replacement","substring","length","undefined","replacementData","JSON","stringify","Error","translationKeyExists","path","Boolean"],"sources":["/home/cedcoss/Desktop/redux-xhat-app/node_modules/@shopify/polaris/build/esm/utilities/i18n/I18n.js"],"sourcesContent":["import { get } from '../get.js';\nimport { merge } from '../merge.js';\n\nconst REPLACE_REGEX = /{([^}]*)}/g;\nclass I18n {\n  /**\n   * @param translation A locale object or array of locale objects that overrides default translations. If specifying an array then your desired language dictionary should come first, followed by your fallback language dictionaries\n   */\n  constructor(translation) {\n    this.translation = {};\n    // slice the array to make a shallow copy of it, so we don't accidentally\n    // modify the original translation array\n    this.translation = Array.isArray(translation) ? merge(...translation.slice().reverse()) : translation;\n  }\n\n  translate(id, replacements) {\n    const text = get(this.translation, id, '');\n\n    if (!text) {\n      return '';\n    }\n\n    if (replacements) {\n      return text.replace(REPLACE_REGEX, match => {\n        const replacement = match.substring(1, match.length - 1);\n\n        if (replacements[replacement] === undefined) {\n          const replacementData = JSON.stringify(replacements);\n          throw new Error(`Error in translation for key '${id}'. No replacement found for key '${replacement}'. The following replacements were passed: '${replacementData}'`);\n        } // This could be a string or a number, but JS doesn't mind which it gets\n        // and can handle that cast internally. So let it, to save us calling\n        // toString() on what's already a string in 90% of cases.\n\n\n        return replacements[replacement];\n      });\n    }\n\n    return text;\n  }\n\n  translationKeyExists(path) {\n    return Boolean(get(this.translation, path));\n  }\n\n}\n\nexport { I18n };\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,WAAW;AAC/B,SAASC,KAAK,QAAQ,aAAa;AAEnC,MAAMC,aAAa,GAAG,YAAY;AAClC,MAAMC,IAAI,CAAC;EACT;AACF;AACA;EACEC,WAAW,CAACC,WAAW,EAAE;IACvB,IAAI,CAACA,WAAW,GAAG,CAAC,CAAC;IACrB;IACA;IACA,IAAI,CAACA,WAAW,GAAGC,KAAK,CAACC,OAAO,CAACF,WAAW,CAAC,GAAGJ,KAAK,CAAC,GAAGI,WAAW,CAACG,KAAK,EAAE,CAACC,OAAO,EAAE,CAAC,GAAGJ,WAAW;EACvG;EAEAK,SAAS,CAACC,EAAE,EAAEC,YAAY,EAAE;IAC1B,MAAMC,IAAI,GAAGb,GAAG,CAAC,IAAI,CAACK,WAAW,EAAEM,EAAE,EAAE,EAAE,CAAC;IAE1C,IAAI,CAACE,IAAI,EAAE;MACT,OAAO,EAAE;IACX;IAEA,IAAID,YAAY,EAAE;MAChB,OAAOC,IAAI,CAACC,OAAO,CAACZ,aAAa,EAAEa,KAAK,IAAI;QAC1C,MAAMC,WAAW,GAAGD,KAAK,CAACE,SAAS,CAAC,CAAC,EAAEF,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC;QAExD,IAAIN,YAAY,CAACI,WAAW,CAAC,KAAKG,SAAS,EAAE;UAC3C,MAAMC,eAAe,GAAGC,IAAI,CAACC,SAAS,CAACV,YAAY,CAAC;UACpD,MAAM,IAAIW,KAAK,CAAE,iCAAgCZ,EAAG,oCAAmCK,WAAY,+CAA8CI,eAAgB,GAAE,CAAC;QACtK,CAAC,CAAC;QACF;QACA;;QAGA,OAAOR,YAAY,CAACI,WAAW,CAAC;MAClC,CAAC,CAAC;IACJ;IAEA,OAAOH,IAAI;EACb;EAEAW,oBAAoB,CAACC,IAAI,EAAE;IACzB,OAAOC,OAAO,CAAC1B,GAAG,CAAC,IAAI,CAACK,WAAW,EAAEoB,IAAI,CAAC,CAAC;EAC7C;AAEF;AAEA,SAAStB,IAAI"},"metadata":{},"sourceType":"module"}