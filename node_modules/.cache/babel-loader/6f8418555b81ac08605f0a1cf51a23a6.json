{"ast":null,"code":"import React, { useState, useRef, useEffect, useCallback, Children, useMemo } from 'react';\nimport { debounce } from '../../utilities/debounce.js';\nimport { useToggle } from '../../utilities/use-toggle.js';\nimport { Key } from '../../types.js';\nimport { scrollable } from '../shared.js';\nimport styles from './Listbox.scss.js';\nimport { useComboboxListbox } from '../../utilities/combobox/hooks.js';\nimport { scrollOptionIntoView } from '../../utilities/listbox/utilities.js';\nimport { ListboxContext, WithinListboxContext } from '../../utilities/listbox/context.js';\nimport { TextOption } from './components/TextOption/TextOption.js';\nimport { Loading } from './components/Loading/Loading.js';\nimport { Section } from './components/Section/Section.js';\nimport { Header } from './components/Header/Header.js';\nimport { Action } from './components/Action/Action.js';\nimport { useUniqueId } from '../../utilities/unique-id/hooks.js';\nimport { KeypressListener } from '../KeypressListener/KeypressListener.js';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden.js';\nimport { Option } from './components/Option/Option.js';\nlet AutoSelection;\n(function (AutoSelection) {\n  AutoSelection[\"FirstSelected\"] = \"FIRST_SELECTED\";\n  AutoSelection[\"First\"] = \"FIRST\";\n  AutoSelection[\"None\"] = \"NONE\";\n})(AutoSelection || (AutoSelection = {}));\nconst OPTION_SELECTOR = '[data-listbox-option]';\nconst OPTION_VALUE_ATTRIBUTE = 'data-listbox-option-value';\nconst OPTION_ACTION_ATTRIBUTE = 'data-listbox-option-action';\nconst OPTION_FOCUS_ATTRIBUTE = 'data-focused';\nfunction Listbox(_ref) {\n  let {\n    children,\n    autoSelection = AutoSelection.FirstSelected,\n    enableKeyboardControl,\n    accessibilityLabel,\n    customListId,\n    onSelect,\n    onActiveOptionChange\n  } = _ref;\n  const [loading, setLoading] = useState();\n  const [activeOption, setActiveOption] = useState();\n  const [lazyLoading, setLazyLoading] = useState(false);\n  const [currentOptions, setCurrentOptions] = useState([]);\n  const {\n    value: keyboardEventsEnabled,\n    setTrue: enableKeyboardEvents,\n    setFalse: disableKeyboardEvents\n  } = useToggle(Boolean(enableKeyboardControl));\n  const uniqueId = useUniqueId('Listbox');\n  const listId = customListId || uniqueId;\n  const scrollableRef = useRef(null);\n  const listboxRef = useRef(null);\n  const {\n    listboxId,\n    textFieldLabelId,\n    textFieldFocused,\n    willLoadMoreOptions,\n    setActiveOptionId,\n    setListboxId,\n    onOptionSelected,\n    onKeyToBottom\n  } = useComboboxListbox();\n  const inCombobox = Boolean(setActiveOptionId);\n  useEffect(() => {\n    if (setListboxId && !listboxId) {\n      setListboxId(listId);\n    }\n  }, [setListboxId, listboxId, listId]);\n  const getNavigableOptions = useCallback(() => {\n    if (!listboxRef.current) {\n      return [];\n    }\n    return [...new Set(listboxRef.current.querySelectorAll(OPTION_SELECTOR))];\n  }, []);\n  const getFirstNavigableOption = useCallback(currentOptions => {\n    const hasSelectedOptions = currentOptions.some(option => option.getAttribute('aria-selected') === 'true');\n    let elementIndex = 0;\n    const element = currentOptions.find((option, index) => {\n      const isInteractable = option.getAttribute('aria-disabled') !== 'true';\n      let isFirstNavigableOption;\n      if (hasSelectedOptions && autoSelection === AutoSelection.FirstSelected) {\n        const isSelected = option.getAttribute('aria-selected') === 'true';\n        isFirstNavigableOption = isSelected && isInteractable;\n      } else {\n        isFirstNavigableOption = isInteractable;\n      }\n      if (isFirstNavigableOption) elementIndex = index;\n      return isFirstNavigableOption;\n    });\n    if (!element) return;\n    return {\n      element,\n      index: elementIndex\n    };\n  }, [autoSelection]);\n  const handleScrollIntoView = useCallback(option => {\n    const {\n      current: scrollable\n    } = scrollableRef;\n    if (scrollable) {\n      scrollOptionIntoView(option.element, scrollable);\n    }\n  }, []);\n  const handleScrollIntoViewDebounced = debounce(handleScrollIntoView, 50);\n  const handleKeyToBottom = useCallback(() => {\n    if (onKeyToBottom) {\n      setLazyLoading(true);\n      return Promise.resolve(onKeyToBottom());\n    }\n  }, [onKeyToBottom]);\n  const handleChangeActiveOption = useCallback(nextOption => {\n    if (!nextOption) return setActiveOption(undefined);\n    activeOption === null || activeOption === void 0 ? void 0 : activeOption.element.removeAttribute(OPTION_FOCUS_ATTRIBUTE);\n    nextOption.element.setAttribute(OPTION_FOCUS_ATTRIBUTE, 'true');\n    handleScrollIntoViewDebounced(nextOption);\n    setActiveOption(nextOption);\n    setActiveOptionId === null || setActiveOptionId === void 0 ? void 0 : setActiveOptionId(nextOption.domId);\n    onActiveOptionChange === null || onActiveOptionChange === void 0 ? void 0 : onActiveOptionChange(nextOption.value, nextOption.domId);\n  }, [activeOption, setActiveOptionId, onActiveOptionChange, handleScrollIntoViewDebounced]);\n  const getFormattedOption = useCallback((element, index) => {\n    return {\n      element,\n      index,\n      domId: element.id,\n      value: element.getAttribute(OPTION_VALUE_ATTRIBUTE) || '',\n      disabled: element.getAttribute('aria-disabled') === 'true',\n      isAction: element.getAttribute(OPTION_ACTION_ATTRIBUTE) === 'true'\n    };\n  }, []);\n  const resetActiveOption = useCallback(() => {\n    var _nextOption, _nextOption2, _nextOption3;\n    let nextOption;\n    const nextOptions = getNavigableOptions();\n    const nextActiveOption = getFirstNavigableOption(nextOptions);\n    if (nextOptions.length === 0 && currentOptions.length > 0) {\n      setCurrentOptions(nextOptions);\n      handleChangeActiveOption();\n      return;\n    }\n    if (nextActiveOption) {\n      const {\n        element,\n        index\n      } = nextActiveOption;\n      nextOption = getFormattedOption(element, index);\n    }\n    const optionIsAlreadyActive = activeOption !== undefined && ((_nextOption = nextOption) === null || _nextOption === void 0 ? void 0 : _nextOption.domId) === (activeOption === null || activeOption === void 0 ? void 0 : activeOption.domId);\n    const actionContentHasUpdated = (activeOption === null || activeOption === void 0 ? void 0 : activeOption.isAction) && ((_nextOption2 = nextOption) === null || _nextOption2 === void 0 ? void 0 : _nextOption2.isAction) && ((_nextOption3 = nextOption) === null || _nextOption3 === void 0 ? void 0 : _nextOption3.value) !== (activeOption === null || activeOption === void 0 ? void 0 : activeOption.value);\n    const currentValues = currentOptions.map(option => option.getAttribute(OPTION_VALUE_ATTRIBUTE));\n    const nextValues = nextOptions.map(option => option.getAttribute(OPTION_VALUE_ATTRIBUTE));\n    const listIsUnchanged = nextValues.length === currentValues.length && nextValues.every((value, index) => {\n      return currentValues[index] === value;\n    });\n    const listIsAppended = currentValues.length !== 0 && nextValues.length > currentValues.length && currentValues.every((value, index) => {\n      return nextValues[index] === value;\n    });\n    if (listIsUnchanged) {\n      if (optionIsAlreadyActive && actionContentHasUpdated) {\n        setCurrentOptions(nextOptions);\n        handleChangeActiveOption(nextOption);\n      }\n      return;\n    }\n    if (listIsAppended) {\n      setCurrentOptions(nextOptions);\n      return;\n    }\n    setCurrentOptions(nextOptions);\n    if (lazyLoading) {\n      setLazyLoading(false);\n      return;\n    }\n    handleChangeActiveOption(nextOption);\n  }, [lazyLoading, currentOptions, activeOption, getFirstNavigableOption, getNavigableOptions, getFormattedOption, handleChangeActiveOption]);\n  useEffect(() => {\n    if (autoSelection !== AutoSelection.None && !loading && children && Children.count(children) > 0) {\n      resetActiveOption();\n    }\n  }, [children, autoSelection, activeOption, loading, resetActiveOption]);\n  useEffect(() => {\n    if (listboxRef.current) {\n      scrollableRef.current = listboxRef.current.closest(scrollable.selector);\n    }\n  }, []);\n  useEffect(() => {\n    if (enableKeyboardControl && !keyboardEventsEnabled) {\n      enableKeyboardEvents();\n    }\n  }, [enableKeyboardControl, keyboardEventsEnabled, enableKeyboardEvents]);\n  const onOptionSelect = useCallback(option => {\n    handleChangeActiveOption(option);\n    if (onOptionSelected) onOptionSelected();\n    if (onSelect) onSelect(option.value);\n  }, [handleChangeActiveOption, onSelect, onOptionSelected]);\n  const getNextIndex = useCallback((currentIndex, lastIndex, direction) => {\n    let nextIndex;\n    if (direction === 'down') {\n      if (currentIndex === lastIndex) {\n        nextIndex = willLoadMoreOptions ? currentIndex + 1 : 0;\n      } else {\n        nextIndex = currentIndex + 1;\n      }\n    } else {\n      nextIndex = currentIndex === 0 ? lastIndex : currentIndex - 1;\n    }\n    return nextIndex;\n  }, [willLoadMoreOptions]);\n  const getNextValidOption = useCallback(async key => {\n    const lastIndex = currentOptions.length - 1;\n    let currentIndex = (activeOption === null || activeOption === void 0 ? void 0 : activeOption.index) || 0;\n    let nextIndex = 0;\n    let element = activeOption === null || activeOption === void 0 ? void 0 : activeOption.element;\n    let totalOptions = -1;\n    if (!activeOption && autoSelection === AutoSelection.None) {\n      const nextOptions = getNavigableOptions();\n      const nextActiveOption = getFirstNavigableOption(nextOptions);\n      setCurrentOptions(nextOptions);\n      return {\n        element: nextActiveOption === null || nextActiveOption === void 0 ? void 0 : nextActiveOption.element,\n        nextIndex: (nextActiveOption === null || nextActiveOption === void 0 ? void 0 : nextActiveOption.index) || 0\n      };\n    }\n    while (totalOptions++ < lastIndex) {\n      var _element;\n      nextIndex = getNextIndex(currentIndex, lastIndex, key);\n      element = currentOptions[nextIndex];\n      const triggerLazyLoad = nextIndex >= lastIndex;\n      const isDisabled = ((_element = element) === null || _element === void 0 ? void 0 : _element.getAttribute('aria-disabled')) === 'true';\n      if (triggerLazyLoad && willLoadMoreOptions) {\n        await handleKeyToBottom();\n      }\n      if (isDisabled) {\n        currentIndex = nextIndex;\n        element = undefined;\n        continue;\n      }\n      break;\n    }\n    return {\n      element,\n      nextIndex\n    };\n  }, [autoSelection, currentOptions, activeOption, willLoadMoreOptions, getNextIndex, handleKeyToBottom, getFirstNavigableOption, getNavigableOptions]);\n  const handleArrow = useCallback(async (type, event) => {\n    event.preventDefault();\n    const {\n      element,\n      nextIndex\n    } = await getNextValidOption(type);\n    if (!element) return;\n    const nextOption = getFormattedOption(element, nextIndex);\n    handleChangeActiveOption(nextOption);\n  }, [getFormattedOption, getNextValidOption, handleChangeActiveOption]);\n  const handleDownArrow = useCallback(event => {\n    handleArrow('down', event);\n  }, [handleArrow]);\n  const handleUpArrow = useCallback(event => {\n    handleArrow('up', event);\n  }, [handleArrow]);\n  const handleEnter = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (activeOption) {\n      onOptionSelect(activeOption);\n    }\n  }, [activeOption, onOptionSelect]);\n  const handleFocus = useCallback(() => {\n    if (enableKeyboardControl) return;\n    enableKeyboardEvents();\n  }, [enableKeyboardControl, enableKeyboardEvents]);\n  const handleBlur = useCallback(event => {\n    event.stopPropagation();\n    if (keyboardEventsEnabled) {\n      const nextActiveOption = getFirstNavigableOption(currentOptions);\n      if (nextActiveOption) {\n        const {\n          element,\n          index\n        } = nextActiveOption;\n        const nextOption = getFormattedOption(element, index);\n        handleChangeActiveOption(nextOption);\n      }\n    }\n    if (enableKeyboardControl) return;\n    disableKeyboardEvents();\n  }, [enableKeyboardControl, currentOptions, keyboardEventsEnabled, disableKeyboardEvents, getFirstNavigableOption, getFormattedOption, handleChangeActiveOption]);\n  const listeners = keyboardEventsEnabled || textFieldFocused ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.DownArrow,\n    handler: handleDownArrow\n  }), /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.UpArrow,\n    handler: handleUpArrow\n  }), /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.Enter,\n    handler: handleEnter\n  })) : null;\n  const listboxContext = useMemo(() => ({\n    onOptionSelect,\n    setLoading\n  }), [onOptionSelect]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, listeners, /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-live\": \"polite\"\n  }, loading ? loading : null)), /*#__PURE__*/React.createElement(ListboxContext.Provider, {\n    value: listboxContext\n  }, /*#__PURE__*/React.createElement(WithinListboxContext.Provider, {\n    value: true\n  }, children ? /*#__PURE__*/React.createElement(\"ul\", {\n    tabIndex: 0,\n    role: \"listbox\",\n    className: styles.Listbox,\n    \"aria-label\": inCombobox ? undefined : accessibilityLabel,\n    \"aria-labelledby\": textFieldLabelId,\n    \"aria-busy\": Boolean(loading),\n    \"aria-activedescendant\": activeOption && activeOption.domId,\n    id: listId,\n    onFocus: inCombobox ? undefined : handleFocus,\n    onBlur: inCombobox ? undefined : handleBlur,\n    ref: listboxRef\n  }, children) : null)));\n}\nListbox.Option = Option;\nListbox.TextOption = TextOption;\nListbox.Loading = Loading;\nListbox.Section = Section;\nListbox.Header = Header;\nListbox.Action = Action;\nexport { AutoSelection, Listbox };","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","Children","useMemo","debounce","useToggle","Key","scrollable","styles","useComboboxListbox","scrollOptionIntoView","ListboxContext","WithinListboxContext","TextOption","Loading","Section","Header","Action","useUniqueId","KeypressListener","VisuallyHidden","Option","AutoSelection","OPTION_SELECTOR","OPTION_VALUE_ATTRIBUTE","OPTION_ACTION_ATTRIBUTE","OPTION_FOCUS_ATTRIBUTE","Listbox","children","autoSelection","FirstSelected","enableKeyboardControl","accessibilityLabel","customListId","onSelect","onActiveOptionChange","loading","setLoading","activeOption","setActiveOption","lazyLoading","setLazyLoading","currentOptions","setCurrentOptions","value","keyboardEventsEnabled","setTrue","enableKeyboardEvents","setFalse","disableKeyboardEvents","Boolean","uniqueId","listId","scrollableRef","listboxRef","listboxId","textFieldLabelId","textFieldFocused","willLoadMoreOptions","setActiveOptionId","setListboxId","onOptionSelected","onKeyToBottom","inCombobox","getNavigableOptions","current","Set","querySelectorAll","getFirstNavigableOption","hasSelectedOptions","some","option","getAttribute","elementIndex","element","find","index","isInteractable","isFirstNavigableOption","isSelected","handleScrollIntoView","handleScrollIntoViewDebounced","handleKeyToBottom","Promise","resolve","handleChangeActiveOption","nextOption","undefined","removeAttribute","setAttribute","domId","getFormattedOption","id","disabled","isAction","resetActiveOption","_nextOption","_nextOption2","_nextOption3","nextOptions","nextActiveOption","length","optionIsAlreadyActive","actionContentHasUpdated","currentValues","map","nextValues","listIsUnchanged","every","listIsAppended","None","count","closest","selector","onOptionSelect","getNextIndex","currentIndex","lastIndex","direction","nextIndex","getNextValidOption","key","totalOptions","_element","triggerLazyLoad","isDisabled","handleArrow","type","event","preventDefault","handleDownArrow","handleUpArrow","handleEnter","stopPropagation","handleFocus","handleBlur","listeners","createElement","Fragment","keyEvent","keyCode","DownArrow","handler","UpArrow","Enter","listboxContext","Provider","tabIndex","role","className","onFocus","onBlur","ref"],"sources":["/home/cedcoss/Desktop/redux-xhat-app/node_modules/@shopify/polaris/build/esm/components/Listbox/Listbox.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback, Children, useMemo } from 'react';\nimport { debounce } from '../../utilities/debounce.js';\nimport { useToggle } from '../../utilities/use-toggle.js';\nimport { Key } from '../../types.js';\nimport { scrollable } from '../shared.js';\nimport styles from './Listbox.scss.js';\nimport { useComboboxListbox } from '../../utilities/combobox/hooks.js';\nimport { scrollOptionIntoView } from '../../utilities/listbox/utilities.js';\nimport { ListboxContext, WithinListboxContext } from '../../utilities/listbox/context.js';\nimport { TextOption } from './components/TextOption/TextOption.js';\nimport { Loading } from './components/Loading/Loading.js';\nimport { Section } from './components/Section/Section.js';\nimport { Header } from './components/Header/Header.js';\nimport { Action } from './components/Action/Action.js';\nimport { useUniqueId } from '../../utilities/unique-id/hooks.js';\nimport { KeypressListener } from '../KeypressListener/KeypressListener.js';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden.js';\nimport { Option } from './components/Option/Option.js';\n\nlet AutoSelection;\n\n(function (AutoSelection) {\n  AutoSelection[\"FirstSelected\"] = \"FIRST_SELECTED\";\n  AutoSelection[\"First\"] = \"FIRST\";\n  AutoSelection[\"None\"] = \"NONE\";\n})(AutoSelection || (AutoSelection = {}));\n\nconst OPTION_SELECTOR = '[data-listbox-option]';\nconst OPTION_VALUE_ATTRIBUTE = 'data-listbox-option-value';\nconst OPTION_ACTION_ATTRIBUTE = 'data-listbox-option-action';\nconst OPTION_FOCUS_ATTRIBUTE = 'data-focused';\nfunction Listbox({\n  children,\n  autoSelection = AutoSelection.FirstSelected,\n  enableKeyboardControl,\n  accessibilityLabel,\n  customListId,\n  onSelect,\n  onActiveOptionChange\n}) {\n  const [loading, setLoading] = useState();\n  const [activeOption, setActiveOption] = useState();\n  const [lazyLoading, setLazyLoading] = useState(false);\n  const [currentOptions, setCurrentOptions] = useState([]);\n  const {\n    value: keyboardEventsEnabled,\n    setTrue: enableKeyboardEvents,\n    setFalse: disableKeyboardEvents\n  } = useToggle(Boolean(enableKeyboardControl));\n  const uniqueId = useUniqueId('Listbox');\n  const listId = customListId || uniqueId;\n  const scrollableRef = useRef(null);\n  const listboxRef = useRef(null);\n  const {\n    listboxId,\n    textFieldLabelId,\n    textFieldFocused,\n    willLoadMoreOptions,\n    setActiveOptionId,\n    setListboxId,\n    onOptionSelected,\n    onKeyToBottom\n  } = useComboboxListbox();\n  const inCombobox = Boolean(setActiveOptionId);\n  useEffect(() => {\n    if (setListboxId && !listboxId) {\n      setListboxId(listId);\n    }\n  }, [setListboxId, listboxId, listId]);\n  const getNavigableOptions = useCallback(() => {\n    if (!listboxRef.current) {\n      return [];\n    }\n\n    return [...new Set(listboxRef.current.querySelectorAll(OPTION_SELECTOR))];\n  }, []);\n  const getFirstNavigableOption = useCallback(currentOptions => {\n    const hasSelectedOptions = currentOptions.some(option => option.getAttribute('aria-selected') === 'true');\n    let elementIndex = 0;\n    const element = currentOptions.find((option, index) => {\n      const isInteractable = option.getAttribute('aria-disabled') !== 'true';\n      let isFirstNavigableOption;\n\n      if (hasSelectedOptions && autoSelection === AutoSelection.FirstSelected) {\n        const isSelected = option.getAttribute('aria-selected') === 'true';\n        isFirstNavigableOption = isSelected && isInteractable;\n      } else {\n        isFirstNavigableOption = isInteractable;\n      }\n\n      if (isFirstNavigableOption) elementIndex = index;\n      return isFirstNavigableOption;\n    });\n    if (!element) return;\n    return {\n      element,\n      index: elementIndex\n    };\n  }, [autoSelection]);\n  const handleScrollIntoView = useCallback(option => {\n    const {\n      current: scrollable\n    } = scrollableRef;\n\n    if (scrollable) {\n      scrollOptionIntoView(option.element, scrollable);\n    }\n  }, []);\n  const handleScrollIntoViewDebounced = debounce(handleScrollIntoView, 50);\n  const handleKeyToBottom = useCallback(() => {\n    if (onKeyToBottom) {\n      setLazyLoading(true);\n      return Promise.resolve(onKeyToBottom());\n    }\n  }, [onKeyToBottom]);\n  const handleChangeActiveOption = useCallback(nextOption => {\n    if (!nextOption) return setActiveOption(undefined);\n    activeOption === null || activeOption === void 0 ? void 0 : activeOption.element.removeAttribute(OPTION_FOCUS_ATTRIBUTE);\n    nextOption.element.setAttribute(OPTION_FOCUS_ATTRIBUTE, 'true');\n    handleScrollIntoViewDebounced(nextOption);\n    setActiveOption(nextOption);\n    setActiveOptionId === null || setActiveOptionId === void 0 ? void 0 : setActiveOptionId(nextOption.domId);\n    onActiveOptionChange === null || onActiveOptionChange === void 0 ? void 0 : onActiveOptionChange(nextOption.value, nextOption.domId);\n  }, [activeOption, setActiveOptionId, onActiveOptionChange, handleScrollIntoViewDebounced]);\n  const getFormattedOption = useCallback((element, index) => {\n    return {\n      element,\n      index,\n      domId: element.id,\n      value: element.getAttribute(OPTION_VALUE_ATTRIBUTE) || '',\n      disabled: element.getAttribute('aria-disabled') === 'true',\n      isAction: element.getAttribute(OPTION_ACTION_ATTRIBUTE) === 'true'\n    };\n  }, []);\n  const resetActiveOption = useCallback(() => {\n    var _nextOption, _nextOption2, _nextOption3;\n\n    let nextOption;\n    const nextOptions = getNavigableOptions();\n    const nextActiveOption = getFirstNavigableOption(nextOptions);\n\n    if (nextOptions.length === 0 && currentOptions.length > 0) {\n      setCurrentOptions(nextOptions);\n      handleChangeActiveOption();\n      return;\n    }\n\n    if (nextActiveOption) {\n      const {\n        element,\n        index\n      } = nextActiveOption;\n      nextOption = getFormattedOption(element, index);\n    }\n\n    const optionIsAlreadyActive = activeOption !== undefined && ((_nextOption = nextOption) === null || _nextOption === void 0 ? void 0 : _nextOption.domId) === (activeOption === null || activeOption === void 0 ? void 0 : activeOption.domId);\n    const actionContentHasUpdated = (activeOption === null || activeOption === void 0 ? void 0 : activeOption.isAction) && ((_nextOption2 = nextOption) === null || _nextOption2 === void 0 ? void 0 : _nextOption2.isAction) && ((_nextOption3 = nextOption) === null || _nextOption3 === void 0 ? void 0 : _nextOption3.value) !== (activeOption === null || activeOption === void 0 ? void 0 : activeOption.value);\n    const currentValues = currentOptions.map(option => option.getAttribute(OPTION_VALUE_ATTRIBUTE));\n    const nextValues = nextOptions.map(option => option.getAttribute(OPTION_VALUE_ATTRIBUTE));\n    const listIsUnchanged = nextValues.length === currentValues.length && nextValues.every((value, index) => {\n      return currentValues[index] === value;\n    });\n    const listIsAppended = currentValues.length !== 0 && nextValues.length > currentValues.length && currentValues.every((value, index) => {\n      return nextValues[index] === value;\n    });\n\n    if (listIsUnchanged) {\n      if (optionIsAlreadyActive && actionContentHasUpdated) {\n        setCurrentOptions(nextOptions);\n        handleChangeActiveOption(nextOption);\n      }\n\n      return;\n    }\n\n    if (listIsAppended) {\n      setCurrentOptions(nextOptions);\n      return;\n    }\n\n    setCurrentOptions(nextOptions);\n\n    if (lazyLoading) {\n      setLazyLoading(false);\n      return;\n    }\n\n    handleChangeActiveOption(nextOption);\n  }, [lazyLoading, currentOptions, activeOption, getFirstNavigableOption, getNavigableOptions, getFormattedOption, handleChangeActiveOption]);\n  useEffect(() => {\n    if (autoSelection !== AutoSelection.None && !loading && children && Children.count(children) > 0) {\n      resetActiveOption();\n    }\n  }, [children, autoSelection, activeOption, loading, resetActiveOption]);\n  useEffect(() => {\n    if (listboxRef.current) {\n      scrollableRef.current = listboxRef.current.closest(scrollable.selector);\n    }\n  }, []);\n  useEffect(() => {\n    if (enableKeyboardControl && !keyboardEventsEnabled) {\n      enableKeyboardEvents();\n    }\n  }, [enableKeyboardControl, keyboardEventsEnabled, enableKeyboardEvents]);\n  const onOptionSelect = useCallback(option => {\n    handleChangeActiveOption(option);\n    if (onOptionSelected) onOptionSelected();\n    if (onSelect) onSelect(option.value);\n  }, [handleChangeActiveOption, onSelect, onOptionSelected]);\n  const getNextIndex = useCallback((currentIndex, lastIndex, direction) => {\n    let nextIndex;\n\n    if (direction === 'down') {\n      if (currentIndex === lastIndex) {\n        nextIndex = willLoadMoreOptions ? currentIndex + 1 : 0;\n      } else {\n        nextIndex = currentIndex + 1;\n      }\n    } else {\n      nextIndex = currentIndex === 0 ? lastIndex : currentIndex - 1;\n    }\n\n    return nextIndex;\n  }, [willLoadMoreOptions]);\n  const getNextValidOption = useCallback(async key => {\n    const lastIndex = currentOptions.length - 1;\n    let currentIndex = (activeOption === null || activeOption === void 0 ? void 0 : activeOption.index) || 0;\n    let nextIndex = 0;\n    let element = activeOption === null || activeOption === void 0 ? void 0 : activeOption.element;\n    let totalOptions = -1;\n\n    if (!activeOption && autoSelection === AutoSelection.None) {\n      const nextOptions = getNavigableOptions();\n      const nextActiveOption = getFirstNavigableOption(nextOptions);\n      setCurrentOptions(nextOptions);\n      return {\n        element: nextActiveOption === null || nextActiveOption === void 0 ? void 0 : nextActiveOption.element,\n        nextIndex: (nextActiveOption === null || nextActiveOption === void 0 ? void 0 : nextActiveOption.index) || 0\n      };\n    }\n\n    while (totalOptions++ < lastIndex) {\n      var _element;\n\n      nextIndex = getNextIndex(currentIndex, lastIndex, key);\n      element = currentOptions[nextIndex];\n      const triggerLazyLoad = nextIndex >= lastIndex;\n      const isDisabled = ((_element = element) === null || _element === void 0 ? void 0 : _element.getAttribute('aria-disabled')) === 'true';\n\n      if (triggerLazyLoad && willLoadMoreOptions) {\n        await handleKeyToBottom();\n      }\n\n      if (isDisabled) {\n        currentIndex = nextIndex;\n        element = undefined;\n        continue;\n      }\n\n      break;\n    }\n\n    return {\n      element,\n      nextIndex\n    };\n  }, [autoSelection, currentOptions, activeOption, willLoadMoreOptions, getNextIndex, handleKeyToBottom, getFirstNavigableOption, getNavigableOptions]);\n  const handleArrow = useCallback(async (type, event) => {\n    event.preventDefault();\n    const {\n      element,\n      nextIndex\n    } = await getNextValidOption(type);\n    if (!element) return;\n    const nextOption = getFormattedOption(element, nextIndex);\n    handleChangeActiveOption(nextOption);\n  }, [getFormattedOption, getNextValidOption, handleChangeActiveOption]);\n  const handleDownArrow = useCallback(event => {\n    handleArrow('down', event);\n  }, [handleArrow]);\n  const handleUpArrow = useCallback(event => {\n    handleArrow('up', event);\n  }, [handleArrow]);\n  const handleEnter = useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (activeOption) {\n      onOptionSelect(activeOption);\n    }\n  }, [activeOption, onOptionSelect]);\n  const handleFocus = useCallback(() => {\n    if (enableKeyboardControl) return;\n    enableKeyboardEvents();\n  }, [enableKeyboardControl, enableKeyboardEvents]);\n  const handleBlur = useCallback(event => {\n    event.stopPropagation();\n\n    if (keyboardEventsEnabled) {\n      const nextActiveOption = getFirstNavigableOption(currentOptions);\n\n      if (nextActiveOption) {\n        const {\n          element,\n          index\n        } = nextActiveOption;\n        const nextOption = getFormattedOption(element, index);\n        handleChangeActiveOption(nextOption);\n      }\n    }\n\n    if (enableKeyboardControl) return;\n    disableKeyboardEvents();\n  }, [enableKeyboardControl, currentOptions, keyboardEventsEnabled, disableKeyboardEvents, getFirstNavigableOption, getFormattedOption, handleChangeActiveOption]);\n  const listeners = keyboardEventsEnabled || textFieldFocused ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.DownArrow,\n    handler: handleDownArrow\n  }), /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.UpArrow,\n    handler: handleUpArrow\n  }), /*#__PURE__*/React.createElement(KeypressListener, {\n    keyEvent: \"keydown\",\n    keyCode: Key.Enter,\n    handler: handleEnter\n  })) : null;\n  const listboxContext = useMemo(() => ({\n    onOptionSelect,\n    setLoading\n  }), [onOptionSelect]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, listeners, /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement(\"div\", {\n    \"aria-live\": \"polite\"\n  }, loading ? loading : null)), /*#__PURE__*/React.createElement(ListboxContext.Provider, {\n    value: listboxContext\n  }, /*#__PURE__*/React.createElement(WithinListboxContext.Provider, {\n    value: true\n  }, children ? /*#__PURE__*/React.createElement(\"ul\", {\n    tabIndex: 0,\n    role: \"listbox\",\n    className: styles.Listbox,\n    \"aria-label\": inCombobox ? undefined : accessibilityLabel,\n    \"aria-labelledby\": textFieldLabelId,\n    \"aria-busy\": Boolean(loading),\n    \"aria-activedescendant\": activeOption && activeOption.domId,\n    id: listId,\n    onFocus: inCombobox ? undefined : handleFocus,\n    onBlur: inCombobox ? undefined : handleBlur,\n    ref: listboxRef\n  }, children) : null)));\n}\nListbox.Option = Option;\nListbox.TextOption = TextOption;\nListbox.Loading = Loading;\nListbox.Section = Section;\nListbox.Header = Header;\nListbox.Action = Action;\n\nexport { AutoSelection, Listbox };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}