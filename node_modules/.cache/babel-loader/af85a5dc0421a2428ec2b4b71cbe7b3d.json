{"ast":null,"code":"import { microSeconds as micro, isNode } from '../util';\nexport var microSeconds = micro;\nexport var type = 'native';\nexport function create(channelName) {\n  var state = {\n    messagesCallback: null,\n    bc: new BroadcastChannel(channelName),\n    subFns: [] // subscriberFunctions\n  };\n\n  state.bc.onmessage = function (msg) {\n    if (state.messagesCallback) {\n      state.messagesCallback(msg.data);\n    }\n  };\n  return state;\n}\nexport function close(channelState) {\n  channelState.bc.close();\n  channelState.subFns = [];\n}\nexport function postMessage(channelState, messageJson) {\n  try {\n    channelState.bc.postMessage(messageJson, false);\n    return Promise.resolve();\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\nexport function onMessage(channelState, fn) {\n  channelState.messagesCallback = fn;\n}\nexport function canBeUsed() {\n  /**\n   * in the electron-renderer, isNode will be true even if we are in browser-context\n   * so we also check if window is undefined\n   */\n  if (isNode && typeof window === 'undefined') return false;\n  if (typeof BroadcastChannel === 'function') {\n    if (BroadcastChannel._pubkey) {\n      throw new Error('BroadcastChannel: Do not overwrite window.BroadcastChannel with this module, this is not a polyfill');\n    }\n    return true;\n  } else return false;\n}\nexport function averageResponseTime() {\n  return 150;\n}\nexport default {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};","map":{"version":3,"names":["microSeconds","micro","isNode","type","create","channelName","state","messagesCallback","bc","BroadcastChannel","subFns","onmessage","msg","data","close","channelState","postMessage","messageJson","Promise","resolve","err","reject","onMessage","fn","canBeUsed","window","_pubkey","Error","averageResponseTime"],"sources":["/home/cedcoss/Desktop/redux-xhat-app/node_modules/broadcast-channel/dist/es/methods/native.js"],"sourcesContent":["import { microSeconds as micro, isNode } from '../util';\nexport var microSeconds = micro;\nexport var type = 'native';\nexport function create(channelName) {\n  var state = {\n    messagesCallback: null,\n    bc: new BroadcastChannel(channelName),\n    subFns: [] // subscriberFunctions\n\n  };\n\n  state.bc.onmessage = function (msg) {\n    if (state.messagesCallback) {\n      state.messagesCallback(msg.data);\n    }\n  };\n\n  return state;\n}\nexport function close(channelState) {\n  channelState.bc.close();\n  channelState.subFns = [];\n}\nexport function postMessage(channelState, messageJson) {\n  try {\n    channelState.bc.postMessage(messageJson, false);\n    return Promise.resolve();\n  } catch (err) {\n    return Promise.reject(err);\n  }\n}\nexport function onMessage(channelState, fn) {\n  channelState.messagesCallback = fn;\n}\nexport function canBeUsed() {\n  /**\n   * in the electron-renderer, isNode will be true even if we are in browser-context\n   * so we also check if window is undefined\n   */\n  if (isNode && typeof window === 'undefined') return false;\n\n  if (typeof BroadcastChannel === 'function') {\n    if (BroadcastChannel._pubkey) {\n      throw new Error('BroadcastChannel: Do not overwrite window.BroadcastChannel with this module, this is not a polyfill');\n    }\n\n    return true;\n  } else return false;\n}\nexport function averageResponseTime() {\n  return 150;\n}\nexport default {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};"],"mappings":"AAAA,SAASA,YAAY,IAAIC,KAAK,EAAEC,MAAM,QAAQ,SAAS;AACvD,OAAO,IAAIF,YAAY,GAAGC,KAAK;AAC/B,OAAO,IAAIE,IAAI,GAAG,QAAQ;AAC1B,OAAO,SAASC,MAAM,CAACC,WAAW,EAAE;EAClC,IAAIC,KAAK,GAAG;IACVC,gBAAgB,EAAE,IAAI;IACtBC,EAAE,EAAE,IAAIC,gBAAgB,CAACJ,WAAW,CAAC;IACrCK,MAAM,EAAE,EAAE,CAAC;EAEb,CAAC;;EAEDJ,KAAK,CAACE,EAAE,CAACG,SAAS,GAAG,UAAUC,GAAG,EAAE;IAClC,IAAIN,KAAK,CAACC,gBAAgB,EAAE;MAC1BD,KAAK,CAACC,gBAAgB,CAACK,GAAG,CAACC,IAAI,CAAC;IAClC;EACF,CAAC;EAED,OAAOP,KAAK;AACd;AACA,OAAO,SAASQ,KAAK,CAACC,YAAY,EAAE;EAClCA,YAAY,CAACP,EAAE,CAACM,KAAK,EAAE;EACvBC,YAAY,CAACL,MAAM,GAAG,EAAE;AAC1B;AACA,OAAO,SAASM,WAAW,CAACD,YAAY,EAAEE,WAAW,EAAE;EACrD,IAAI;IACFF,YAAY,CAACP,EAAE,CAACQ,WAAW,CAACC,WAAW,EAAE,KAAK,CAAC;IAC/C,OAAOC,OAAO,CAACC,OAAO,EAAE;EAC1B,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,OAAOF,OAAO,CAACG,MAAM,CAACD,GAAG,CAAC;EAC5B;AACF;AACA,OAAO,SAASE,SAAS,CAACP,YAAY,EAAEQ,EAAE,EAAE;EAC1CR,YAAY,CAACR,gBAAgB,GAAGgB,EAAE;AACpC;AACA,OAAO,SAASC,SAAS,GAAG;EAC1B;AACF;AACA;AACA;EACE,IAAItB,MAAM,IAAI,OAAOuB,MAAM,KAAK,WAAW,EAAE,OAAO,KAAK;EAEzD,IAAI,OAAOhB,gBAAgB,KAAK,UAAU,EAAE;IAC1C,IAAIA,gBAAgB,CAACiB,OAAO,EAAE;MAC5B,MAAM,IAAIC,KAAK,CAAC,qGAAqG,CAAC;IACxH;IAEA,OAAO,IAAI;EACb,CAAC,MAAM,OAAO,KAAK;AACrB;AACA,OAAO,SAASC,mBAAmB,GAAG;EACpC,OAAO,GAAG;AACZ;AACA,eAAe;EACbxB,MAAM,EAAEA,MAAM;EACdU,KAAK,EAAEA,KAAK;EACZQ,SAAS,EAAEA,SAAS;EACpBN,WAAW,EAAEA,WAAW;EACxBQ,SAAS,EAAEA,SAAS;EACpBrB,IAAI,EAAEA,IAAI;EACVyB,mBAAmB,EAAEA,mBAAmB;EACxC5B,YAAY,EAAEA;AAChB,CAAC"},"metadata":{},"sourceType":"module"}