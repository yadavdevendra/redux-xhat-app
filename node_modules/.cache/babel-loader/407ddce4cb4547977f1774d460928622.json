{"ast":null,"code":"import { useState, useCallback } from 'react';\nlet SelectionType;\n(function (SelectionType) {\n  SelectionType[\"All\"] = \"all\";\n  SelectionType[\"Page\"] = \"page\";\n  SelectionType[\"Multi\"] = \"multi\";\n  SelectionType[\"Single\"] = \"single\";\n})(SelectionType || (SelectionType = {}));\nfunction defaultResourceIDResolver(resource) {\n  if ('id' in resource) {\n    return resource.id;\n  }\n  throw new Error('Your resource does not directly contain an `id`. Pass a `resourceIDResolver` to `useIndexResourceState`');\n}\nfunction useIndexResourceState(resources) {\n  let {\n    selectedResources: initSelectedResources = [],\n    allResourcesSelected: initAllResourcesSelected = false,\n    resourceIDResolver = defaultResourceIDResolver,\n    resourceFilter = undefined\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    selectedResources: [],\n    allResourcesSelected: false,\n    resourceIDResolver: defaultResourceIDResolver,\n    resourceFilter: undefined\n  };\n  const [selectedResources, setSelectedResources] = useState(initSelectedResources);\n  const [allResourcesSelected, setAllResourcesSelected] = useState(initAllResourcesSelected);\n  const handleSelectionChange = useCallback((selectionType, isSelecting, selection) => {\n    if (selectionType === SelectionType.All) {\n      setAllResourcesSelected(isSelecting);\n    } else if (allResourcesSelected) {\n      setAllResourcesSelected(false);\n    }\n    switch (selectionType) {\n      case SelectionType.Single:\n        setSelectedResources(newSelectedResources => isSelecting ? [...newSelectedResources, selection] : newSelectedResources.filter(id => id !== selection));\n        break;\n      case SelectionType.All:\n      case SelectionType.Page:\n        if (resourceFilter) {\n          const filteredResources = resources.filter(resourceFilter);\n          setSelectedResources(isSelecting && selectedResources.length < filteredResources.length ? filteredResources.map(resourceIDResolver) : []);\n        } else {\n          setSelectedResources(isSelecting ? resources.map(resourceIDResolver) : []);\n        }\n        break;\n      case SelectionType.Multi:\n        if (!selection) break;\n        setSelectedResources(newSelectedResources => {\n          const ids = [];\n          const filteredResources = resourceFilter ? resources.filter(resourceFilter) : resources;\n          for (let i = selection[0]; i <= selection[1]; i++) {\n            if (filteredResources.includes(resources[i])) {\n              const id = resourceIDResolver(resources[i]);\n              if (isSelecting && !newSelectedResources.includes(id) || !isSelecting && newSelectedResources.includes(id)) {\n                ids.push(id);\n              }\n            }\n          }\n          return isSelecting ? [...newSelectedResources, ...ids] : newSelectedResources.filter(id => !ids.includes(id));\n        });\n        break;\n    }\n  }, [allResourcesSelected, resourceFilter, selectedResources.length, resources, resourceIDResolver]);\n  const clearSelection = useCallback(() => {\n    setSelectedResources([]);\n    setAllResourcesSelected(false);\n  }, []);\n  const removeSelectedResources = useCallback(removeResources => {\n    const selectedResourcesCopy = [...selectedResources];\n    const newSelectedResources = selectedResourcesCopy.filter(resource => !removeResources.includes(resource));\n    setSelectedResources(newSelectedResources);\n    if (newSelectedResources.length === 0) {\n      setAllResourcesSelected(false);\n    }\n  }, [selectedResources]);\n  return {\n    selectedResources,\n    allResourcesSelected,\n    handleSelectionChange,\n    clearSelection,\n    removeSelectedResources\n  };\n}\nexport { SelectionType, useIndexResourceState };","map":{"version":3,"names":["useState","useCallback","SelectionType","defaultResourceIDResolver","resource","id","Error","useIndexResourceState","resources","selectedResources","initSelectedResources","allResourcesSelected","initAllResourcesSelected","resourceIDResolver","resourceFilter","undefined","setSelectedResources","setAllResourcesSelected","handleSelectionChange","selectionType","isSelecting","selection","All","Single","newSelectedResources","filter","Page","filteredResources","length","map","Multi","ids","i","includes","push","clearSelection","removeSelectedResources","removeResources","selectedResourcesCopy"],"sources":["/home/cedcoss/Desktop/redux-xhat-app/node_modules/@shopify/polaris/build/esm/utilities/use-index-resource-state.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nlet SelectionType;\n\n(function (SelectionType) {\n  SelectionType[\"All\"] = \"all\";\n  SelectionType[\"Page\"] = \"page\";\n  SelectionType[\"Multi\"] = \"multi\";\n  SelectionType[\"Single\"] = \"single\";\n})(SelectionType || (SelectionType = {}));\n\nfunction defaultResourceIDResolver(resource) {\n  if ('id' in resource) {\n    return resource.id;\n  }\n\n  throw new Error('Your resource does not directly contain an `id`. Pass a `resourceIDResolver` to `useIndexResourceState`');\n}\n\nfunction useIndexResourceState(resources, {\n  selectedResources: initSelectedResources = [],\n  allResourcesSelected: initAllResourcesSelected = false,\n  resourceIDResolver = defaultResourceIDResolver,\n  resourceFilter = undefined\n} = {\n  selectedResources: [],\n  allResourcesSelected: false,\n  resourceIDResolver: defaultResourceIDResolver,\n  resourceFilter: undefined\n}) {\n  const [selectedResources, setSelectedResources] = useState(initSelectedResources);\n  const [allResourcesSelected, setAllResourcesSelected] = useState(initAllResourcesSelected);\n  const handleSelectionChange = useCallback((selectionType, isSelecting, selection) => {\n    if (selectionType === SelectionType.All) {\n      setAllResourcesSelected(isSelecting);\n    } else if (allResourcesSelected) {\n      setAllResourcesSelected(false);\n    }\n\n    switch (selectionType) {\n      case SelectionType.Single:\n        setSelectedResources(newSelectedResources => isSelecting ? [...newSelectedResources, selection] : newSelectedResources.filter(id => id !== selection));\n        break;\n\n      case SelectionType.All:\n      case SelectionType.Page:\n        if (resourceFilter) {\n          const filteredResources = resources.filter(resourceFilter);\n          setSelectedResources(isSelecting && selectedResources.length < filteredResources.length ? filteredResources.map(resourceIDResolver) : []);\n        } else {\n          setSelectedResources(isSelecting ? resources.map(resourceIDResolver) : []);\n        }\n\n        break;\n\n      case SelectionType.Multi:\n        if (!selection) break;\n        setSelectedResources(newSelectedResources => {\n          const ids = [];\n          const filteredResources = resourceFilter ? resources.filter(resourceFilter) : resources;\n\n          for (let i = selection[0]; i <= selection[1]; i++) {\n            if (filteredResources.includes(resources[i])) {\n              const id = resourceIDResolver(resources[i]);\n\n              if (isSelecting && !newSelectedResources.includes(id) || !isSelecting && newSelectedResources.includes(id)) {\n                ids.push(id);\n              }\n            }\n          }\n\n          return isSelecting ? [...newSelectedResources, ...ids] : newSelectedResources.filter(id => !ids.includes(id));\n        });\n        break;\n    }\n  }, [allResourcesSelected, resourceFilter, selectedResources.length, resources, resourceIDResolver]);\n  const clearSelection = useCallback(() => {\n    setSelectedResources([]);\n    setAllResourcesSelected(false);\n  }, []);\n  const removeSelectedResources = useCallback(removeResources => {\n    const selectedResourcesCopy = [...selectedResources];\n    const newSelectedResources = selectedResourcesCopy.filter(resource => !removeResources.includes(resource));\n    setSelectedResources(newSelectedResources);\n\n    if (newSelectedResources.length === 0) {\n      setAllResourcesSelected(false);\n    }\n  }, [selectedResources]);\n  return {\n    selectedResources,\n    allResourcesSelected,\n    handleSelectionChange,\n    clearSelection,\n    removeSelectedResources\n  };\n}\n\nexport { SelectionType, useIndexResourceState };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,IAAIC,aAAa;AAEjB,CAAC,UAAUA,aAAa,EAAE;EACxBA,aAAa,CAAC,KAAK,CAAC,GAAG,KAAK;EAC5BA,aAAa,CAAC,MAAM,CAAC,GAAG,MAAM;EAC9BA,aAAa,CAAC,OAAO,CAAC,GAAG,OAAO;EAChCA,aAAa,CAAC,QAAQ,CAAC,GAAG,QAAQ;AACpC,CAAC,EAAEA,aAAa,KAAKA,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC;AAEzC,SAASC,yBAAyB,CAACC,QAAQ,EAAE;EAC3C,IAAI,IAAI,IAAIA,QAAQ,EAAE;IACpB,OAAOA,QAAQ,CAACC,EAAE;EACpB;EAEA,MAAM,IAAIC,KAAK,CAAC,yGAAyG,CAAC;AAC5H;AAEA,SAASC,qBAAqB,CAACC,SAAS,EAUrC;EAAA,IAVuC;IACxCC,iBAAiB,EAAEC,qBAAqB,GAAG,EAAE;IAC7CC,oBAAoB,EAAEC,wBAAwB,GAAG,KAAK;IACtDC,kBAAkB,GAAGV,yBAAyB;IAC9CW,cAAc,GAAGC;EACnB,CAAC,uEAAG;IACFN,iBAAiB,EAAE,EAAE;IACrBE,oBAAoB,EAAE,KAAK;IAC3BE,kBAAkB,EAAEV,yBAAyB;IAC7CW,cAAc,EAAEC;EAClB,CAAC;EACC,MAAM,CAACN,iBAAiB,EAAEO,oBAAoB,CAAC,GAAGhB,QAAQ,CAACU,qBAAqB,CAAC;EACjF,MAAM,CAACC,oBAAoB,EAAEM,uBAAuB,CAAC,GAAGjB,QAAQ,CAACY,wBAAwB,CAAC;EAC1F,MAAMM,qBAAqB,GAAGjB,WAAW,CAAC,CAACkB,aAAa,EAAEC,WAAW,EAAEC,SAAS,KAAK;IACnF,IAAIF,aAAa,KAAKjB,aAAa,CAACoB,GAAG,EAAE;MACvCL,uBAAuB,CAACG,WAAW,CAAC;IACtC,CAAC,MAAM,IAAIT,oBAAoB,EAAE;MAC/BM,uBAAuB,CAAC,KAAK,CAAC;IAChC;IAEA,QAAQE,aAAa;MACnB,KAAKjB,aAAa,CAACqB,MAAM;QACvBP,oBAAoB,CAACQ,oBAAoB,IAAIJ,WAAW,GAAG,CAAC,GAAGI,oBAAoB,EAAEH,SAAS,CAAC,GAAGG,oBAAoB,CAACC,MAAM,CAACpB,EAAE,IAAIA,EAAE,KAAKgB,SAAS,CAAC,CAAC;QACtJ;MAEF,KAAKnB,aAAa,CAACoB,GAAG;MACtB,KAAKpB,aAAa,CAACwB,IAAI;QACrB,IAAIZ,cAAc,EAAE;UAClB,MAAMa,iBAAiB,GAAGnB,SAAS,CAACiB,MAAM,CAACX,cAAc,CAAC;UAC1DE,oBAAoB,CAACI,WAAW,IAAIX,iBAAiB,CAACmB,MAAM,GAAGD,iBAAiB,CAACC,MAAM,GAAGD,iBAAiB,CAACE,GAAG,CAAChB,kBAAkB,CAAC,GAAG,EAAE,CAAC;QAC3I,CAAC,MAAM;UACLG,oBAAoB,CAACI,WAAW,GAAGZ,SAAS,CAACqB,GAAG,CAAChB,kBAAkB,CAAC,GAAG,EAAE,CAAC;QAC5E;QAEA;MAEF,KAAKX,aAAa,CAAC4B,KAAK;QACtB,IAAI,CAACT,SAAS,EAAE;QAChBL,oBAAoB,CAACQ,oBAAoB,IAAI;UAC3C,MAAMO,GAAG,GAAG,EAAE;UACd,MAAMJ,iBAAiB,GAAGb,cAAc,GAAGN,SAAS,CAACiB,MAAM,CAACX,cAAc,CAAC,GAAGN,SAAS;UAEvF,KAAK,IAAIwB,CAAC,GAAGX,SAAS,CAAC,CAAC,CAAC,EAAEW,CAAC,IAAIX,SAAS,CAAC,CAAC,CAAC,EAAEW,CAAC,EAAE,EAAE;YACjD,IAAIL,iBAAiB,CAACM,QAAQ,CAACzB,SAAS,CAACwB,CAAC,CAAC,CAAC,EAAE;cAC5C,MAAM3B,EAAE,GAAGQ,kBAAkB,CAACL,SAAS,CAACwB,CAAC,CAAC,CAAC;cAE3C,IAAIZ,WAAW,IAAI,CAACI,oBAAoB,CAACS,QAAQ,CAAC5B,EAAE,CAAC,IAAI,CAACe,WAAW,IAAII,oBAAoB,CAACS,QAAQ,CAAC5B,EAAE,CAAC,EAAE;gBAC1G0B,GAAG,CAACG,IAAI,CAAC7B,EAAE,CAAC;cACd;YACF;UACF;UAEA,OAAOe,WAAW,GAAG,CAAC,GAAGI,oBAAoB,EAAE,GAAGO,GAAG,CAAC,GAAGP,oBAAoB,CAACC,MAAM,CAACpB,EAAE,IAAI,CAAC0B,GAAG,CAACE,QAAQ,CAAC5B,EAAE,CAAC,CAAC;QAC/G,CAAC,CAAC;QACF;IAAM;EAEZ,CAAC,EAAE,CAACM,oBAAoB,EAAEG,cAAc,EAAEL,iBAAiB,CAACmB,MAAM,EAAEpB,SAAS,EAAEK,kBAAkB,CAAC,CAAC;EACnG,MAAMsB,cAAc,GAAGlC,WAAW,CAAC,MAAM;IACvCe,oBAAoB,CAAC,EAAE,CAAC;IACxBC,uBAAuB,CAAC,KAAK,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;EACN,MAAMmB,uBAAuB,GAAGnC,WAAW,CAACoC,eAAe,IAAI;IAC7D,MAAMC,qBAAqB,GAAG,CAAC,GAAG7B,iBAAiB,CAAC;IACpD,MAAMe,oBAAoB,GAAGc,qBAAqB,CAACb,MAAM,CAACrB,QAAQ,IAAI,CAACiC,eAAe,CAACJ,QAAQ,CAAC7B,QAAQ,CAAC,CAAC;IAC1GY,oBAAoB,CAACQ,oBAAoB,CAAC;IAE1C,IAAIA,oBAAoB,CAACI,MAAM,KAAK,CAAC,EAAE;MACrCX,uBAAuB,CAAC,KAAK,CAAC;IAChC;EACF,CAAC,EAAE,CAACR,iBAAiB,CAAC,CAAC;EACvB,OAAO;IACLA,iBAAiB;IACjBE,oBAAoB;IACpBO,qBAAqB;IACrBiB,cAAc;IACdC;EACF,CAAC;AACH;AAEA,SAASlC,aAAa,EAAEK,qBAAqB"},"metadata":{},"sourceType":"module"}