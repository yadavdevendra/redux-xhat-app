{"ast":null,"code":"import NativeMethod from './methods/native.js';\nimport IndexeDbMethod from './methods/indexed-db.js';\nimport LocalstorageMethod from './methods/localstorage.js';\nimport SimulateMethod from './methods/simulate.js';\nimport { isNode } from './util'; // order is important\n\nvar METHODS = [NativeMethod,\n// fastest\nIndexeDbMethod, LocalstorageMethod];\n/**\n * The NodeMethod is loaded lazy\n * so it will not get bundled in browser-builds\n */\n\nif (isNode) {\n  /**\n   * we use the non-transpiled code for nodejs\n   * because it runs faster\n   */\n  var NodeMethod = require('../../src/methods/' +\n  // use this hack so that browserify and others\n  // do not import the node-method by default\n  // when bundling.\n  'node.js');\n  /**\n   * this will be false for webpackbuilds\n   * which will shim the node-method with an empty object {}\n   */\n\n  if (typeof NodeMethod.canBeUsed === 'function') {\n    METHODS.push(NodeMethod);\n  }\n}\nexport function chooseMethod(options) {\n  var chooseMethods = [].concat(options.methods, METHODS).filter(Boolean); // directly chosen\n\n  if (options.type) {\n    if (options.type === 'simulate') {\n      // only use simulate-method if directly chosen\n      return SimulateMethod;\n    }\n    var ret = chooseMethods.find(function (m) {\n      return m.type === options.type;\n    });\n    if (!ret) throw new Error('method-type ' + options.type + ' not found');else return ret;\n  }\n  /**\n   * if no webworker support is needed,\n   * remove idb from the list so that localstorage is been chosen\n   */\n\n  if (!options.webWorkerSupport && !isNode) {\n    chooseMethods = chooseMethods.filter(function (m) {\n      return m.type !== 'idb';\n    });\n  }\n  var useMethod = chooseMethods.find(function (method) {\n    return method.canBeUsed();\n  });\n  if (!useMethod) throw new Error('No useable methode found:' + JSON.stringify(METHODS.map(function (m) {\n    return m.type;\n  })));else return useMethod;\n}","map":{"version":3,"names":["NativeMethod","IndexeDbMethod","LocalstorageMethod","SimulateMethod","isNode","METHODS","NodeMethod","require","canBeUsed","push","chooseMethod","options","chooseMethods","concat","methods","filter","Boolean","type","ret","find","m","Error","webWorkerSupport","useMethod","method","JSON","stringify","map"],"sources":["/home/cedcoss/Desktop/redux-xhat-app/node_modules/broadcast-channel/dist/es/method-chooser.js"],"sourcesContent":["import NativeMethod from './methods/native.js';\nimport IndexeDbMethod from './methods/indexed-db.js';\nimport LocalstorageMethod from './methods/localstorage.js';\nimport SimulateMethod from './methods/simulate.js';\nimport { isNode } from './util'; // order is important\n\nvar METHODS = [NativeMethod, // fastest\nIndexeDbMethod, LocalstorageMethod];\n/**\n * The NodeMethod is loaded lazy\n * so it will not get bundled in browser-builds\n */\n\nif (isNode) {\n  /**\n   * we use the non-transpiled code for nodejs\n   * because it runs faster\n   */\n  var NodeMethod = require('../../src/methods/' + // use this hack so that browserify and others\n  // do not import the node-method by default\n  // when bundling.\n  'node.js');\n  /**\n   * this will be false for webpackbuilds\n   * which will shim the node-method with an empty object {}\n   */\n\n\n  if (typeof NodeMethod.canBeUsed === 'function') {\n    METHODS.push(NodeMethod);\n  }\n}\n\nexport function chooseMethod(options) {\n  var chooseMethods = [].concat(options.methods, METHODS).filter(Boolean); // directly chosen\n\n  if (options.type) {\n    if (options.type === 'simulate') {\n      // only use simulate-method if directly chosen\n      return SimulateMethod;\n    }\n\n    var ret = chooseMethods.find(function (m) {\n      return m.type === options.type;\n    });\n    if (!ret) throw new Error('method-type ' + options.type + ' not found');else return ret;\n  }\n  /**\n   * if no webworker support is needed,\n   * remove idb from the list so that localstorage is been chosen\n   */\n\n\n  if (!options.webWorkerSupport && !isNode) {\n    chooseMethods = chooseMethods.filter(function (m) {\n      return m.type !== 'idb';\n    });\n  }\n\n  var useMethod = chooseMethods.find(function (method) {\n    return method.canBeUsed();\n  });\n  if (!useMethod) throw new Error('No useable methode found:' + JSON.stringify(METHODS.map(function (m) {\n    return m.type;\n  })));else return useMethod;\n}"],"mappings":"AAAA,OAAOA,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,cAAc,MAAM,yBAAyB;AACpD,OAAOC,kBAAkB,MAAM,2BAA2B;AAC1D,OAAOC,cAAc,MAAM,uBAAuB;AAClD,SAASC,MAAM,QAAQ,QAAQ,CAAC,CAAC;;AAEjC,IAAIC,OAAO,GAAG,CAACL,YAAY;AAAE;AAC7BC,cAAc,EAAEC,kBAAkB,CAAC;AACnC;AACA;AACA;AACA;;AAEA,IAAIE,MAAM,EAAE;EACV;AACF;AACA;AACA;EACE,IAAIE,UAAU,GAAGC,OAAO,CAAC,oBAAoB;EAAG;EAChD;EACA;EACA,SAAS,CAAC;EACV;AACF;AACA;AACA;;EAGE,IAAI,OAAOD,UAAU,CAACE,SAAS,KAAK,UAAU,EAAE;IAC9CH,OAAO,CAACI,IAAI,CAACH,UAAU,CAAC;EAC1B;AACF;AAEA,OAAO,SAASI,YAAY,CAACC,OAAO,EAAE;EACpC,IAAIC,aAAa,GAAG,EAAE,CAACC,MAAM,CAACF,OAAO,CAACG,OAAO,EAAET,OAAO,CAAC,CAACU,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;;EAEzE,IAAIL,OAAO,CAACM,IAAI,EAAE;IAChB,IAAIN,OAAO,CAACM,IAAI,KAAK,UAAU,EAAE;MAC/B;MACA,OAAOd,cAAc;IACvB;IAEA,IAAIe,GAAG,GAAGN,aAAa,CAACO,IAAI,CAAC,UAAUC,CAAC,EAAE;MACxC,OAAOA,CAAC,CAACH,IAAI,KAAKN,OAAO,CAACM,IAAI;IAChC,CAAC,CAAC;IACF,IAAI,CAACC,GAAG,EAAE,MAAM,IAAIG,KAAK,CAAC,cAAc,GAAGV,OAAO,CAACM,IAAI,GAAG,YAAY,CAAC,CAAC,KAAK,OAAOC,GAAG;EACzF;EACA;AACF;AACA;AACA;;EAGE,IAAI,CAACP,OAAO,CAACW,gBAAgB,IAAI,CAAClB,MAAM,EAAE;IACxCQ,aAAa,GAAGA,aAAa,CAACG,MAAM,CAAC,UAAUK,CAAC,EAAE;MAChD,OAAOA,CAAC,CAACH,IAAI,KAAK,KAAK;IACzB,CAAC,CAAC;EACJ;EAEA,IAAIM,SAAS,GAAGX,aAAa,CAACO,IAAI,CAAC,UAAUK,MAAM,EAAE;IACnD,OAAOA,MAAM,CAAChB,SAAS,EAAE;EAC3B,CAAC,CAAC;EACF,IAAI,CAACe,SAAS,EAAE,MAAM,IAAIF,KAAK,CAAC,2BAA2B,GAAGI,IAAI,CAACC,SAAS,CAACrB,OAAO,CAACsB,GAAG,CAAC,UAAUP,CAAC,EAAE;IACpG,OAAOA,CAAC,CAACH,IAAI;EACf,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,OAAOM,SAAS;AAC5B"},"metadata":{},"sourceType":"module"}