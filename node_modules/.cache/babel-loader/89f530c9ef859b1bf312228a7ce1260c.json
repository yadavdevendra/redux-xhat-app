{"ast":null,"code":"import { useContext, useRef } from 'react';\nimport { MissingAppProviderError } from '../errors.js';\nimport { UniqueIdFactoryContext } from './context.js';\n\n/**\n * Returns a unique id that remains consistent across multiple re-renders of the\n * same hook\n * @param prefix Defines a prefix for the ID. You probably want to set this to\n *   the name of the component you're calling `useUniqueId` in.\n * @param overrideId Defines a fixed value to use instead of generating a unique\n *   ID. Useful for components that allow consumers to specify their own ID.\n */\n\nfunction useUniqueId() {\n  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let overrideId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  const idFactory = useContext(UniqueIdFactoryContext); // By using a ref to store the uniqueId for each invocation of the hook and\n  // checking that it is not already populated we ensure that we don’t generate\n  // a new ID on every re-render of a component.\n\n  const uniqueIdRef = useRef(null);\n  if (!idFactory) {\n    throw new MissingAppProviderError('No UniqueIdFactory was provided.');\n  } // If an override was specified, then use that instead of using a unique ID\n  // Hooks can’t be called conditionally so this has to go after all use* calls\n\n  if (overrideId) {\n    return overrideId;\n  } // If a unique id has not yet been generated, then get a new one\n\n  if (!uniqueIdRef.current) {\n    uniqueIdRef.current = idFactory.nextId(prefix);\n  }\n  return uniqueIdRef.current;\n}\nexport { useUniqueId };","map":{"version":3,"names":["useContext","useRef","MissingAppProviderError","UniqueIdFactoryContext","useUniqueId","prefix","overrideId","idFactory","uniqueIdRef","current","nextId"],"sources":["/home/cedcoss/Desktop/redux-xhat-app/node_modules/@shopify/polaris/build/esm/utilities/unique-id/hooks.js"],"sourcesContent":["import { useContext, useRef } from 'react';\nimport { MissingAppProviderError } from '../errors.js';\nimport { UniqueIdFactoryContext } from './context.js';\n\n/**\n * Returns a unique id that remains consistent across multiple re-renders of the\n * same hook\n * @param prefix Defines a prefix for the ID. You probably want to set this to\n *   the name of the component you're calling `useUniqueId` in.\n * @param overrideId Defines a fixed value to use instead of generating a unique\n *   ID. Useful for components that allow consumers to specify their own ID.\n */\n\nfunction useUniqueId(prefix = '', overrideId = '') {\n  const idFactory = useContext(UniqueIdFactoryContext); // By using a ref to store the uniqueId for each invocation of the hook and\n  // checking that it is not already populated we ensure that we don’t generate\n  // a new ID on every re-render of a component.\n\n  const uniqueIdRef = useRef(null);\n\n  if (!idFactory) {\n    throw new MissingAppProviderError('No UniqueIdFactory was provided.');\n  } // If an override was specified, then use that instead of using a unique ID\n  // Hooks can’t be called conditionally so this has to go after all use* calls\n\n\n  if (overrideId) {\n    return overrideId;\n  } // If a unique id has not yet been generated, then get a new one\n\n\n  if (!uniqueIdRef.current) {\n    uniqueIdRef.current = idFactory.nextId(prefix);\n  }\n\n  return uniqueIdRef.current;\n}\n\nexport { useUniqueId };\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,MAAM,QAAQ,OAAO;AAC1C,SAASC,uBAAuB,QAAQ,cAAc;AACtD,SAASC,sBAAsB,QAAQ,cAAc;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,WAAW,GAA+B;EAAA,IAA9BC,MAAM,uEAAG,EAAE;EAAA,IAAEC,UAAU,uEAAG,EAAE;EAC/C,MAAMC,SAAS,GAAGP,UAAU,CAACG,sBAAsB,CAAC,CAAC,CAAC;EACtD;EACA;;EAEA,MAAMK,WAAW,GAAGP,MAAM,CAAC,IAAI,CAAC;EAEhC,IAAI,CAACM,SAAS,EAAE;IACd,MAAM,IAAIL,uBAAuB,CAAC,kCAAkC,CAAC;EACvE,CAAC,CAAC;EACF;;EAGA,IAAII,UAAU,EAAE;IACd,OAAOA,UAAU;EACnB,CAAC,CAAC;;EAGF,IAAI,CAACE,WAAW,CAACC,OAAO,EAAE;IACxBD,WAAW,CAACC,OAAO,GAAGF,SAAS,CAACG,MAAM,CAACL,MAAM,CAAC;EAChD;EAEA,OAAOG,WAAW,CAACC,OAAO;AAC5B;AAEA,SAASL,WAAW"},"metadata":{},"sourceType":"module"}